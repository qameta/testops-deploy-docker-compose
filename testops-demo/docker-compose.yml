version: "3.9"

services:

  testops:
    restart: always
    image: ${IMAGES_REGISTRY}/${IMAGES_REPO}/testops:${RELEASE_TO_DEPLOY}
    container_name: testops
    networks:
      - testops-net
    ports:
      - "${DEMO_INSTANCE_PORT}:${DEMO_INSTANCE_CONTAINER_PORT}"
    healthcheck:
      test: "curl -f http://localhost:${DEMO_INSTANCE_CONTAINER_PORT}/api/management/health || exit 1"
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 20s
    environment:
      # Not required for DEMO installation
      # TLS_ENDPOINTS: ${TLS_ENDPOINTS}
      SPRING_PROFILES_ACTIVE: compose
      SPRING_CLOUD_CONSUL_ENABLED: "false"
      SPRING_OUTPUT_ANSI_ENABLED: never
      ALLURE_JWT_SECRET: ${DEMO_INSTANCE_JWT_SECRET}
      ALLURE_SECURE: ${DEMO_INSTANCE_SECURE_COOKIE}
      ALLURE_JWT_ACCESS_TOKEN_VALIDITY_SECONDS: ${DEMO_INSTANCE_SESSION_DURATION}

      ALLURE_ENDPOINT: ${DEMO_INSTANCE_PROTO}://${DEMO_INSTANCE_HOST}
      ALLURE_CRYPTO_PASSWORD: ${DEMO_INSTANCE_CRYPTO_PASSWORD}
      # Deprecated starting from 5.6.0
      # Enable if you are deploying 5.5.1
      # ALLURE_SECURITY_USER_NAME: admin
      # ALLURE_SECURITY_USER_PASSWORD: ${DEMO_INSTANCE_
      ALLURE_MAIL_ROOT: ${FIRST_ADMIN_EMAIL}
      ALLURE_REGISTRATION_AUTOAPPROVE: false
      ALLURE_REGISTRATION_ENABLED: false
      ALLURE_REGISTRATION_DEFAULT_ROLE: ROLE_GUEST

      SPRING_SESSION_STORE_TYPE: REDIS
      SPRING_DATA_REDIS_HOST: ${DEMO_INSTANCE_REDIS_HOST}
      SPRING_DATA_REDIS_PORT: ${DEMO_INSTANCE_REDIS_PORT}
      SPRING_DATA_REDIS_PASSWORD: ${DEMO_INSTANCE_REDIS_PASS}
      SPRING_DATA_REDIS_DATABASE: ${DEMO_INSTANCE_REDIS_DB}

      # SPRING_MAIL_ are mandatory for all types of authentication
      SPRING_MAIL_HOST: ${SMTP_HOST}
      SPRING_MAIL_PORT: ${SMTP_PORT}
      SPRING_MAIL_USERNAME: ${SMTP_USERNAME}
      SPRING_MAIL_PASSWORD: ${SMTP_PASSWORD}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: ${SMTP_AUTH}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: ${SMTP_STARTTLS_ENABLE}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_REQUIRED: ${SMTP_STARTTLS_REQUIRED}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_SSL_ENABLE: ${SMTP_SSL_ENABLE}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_SSL_TRUST: ${SMTP_SSL_TRUST}
      ALLURE_MAIL_FROM: ${SMTP_MAIL_FROM}
      # Not required for DEMO installation
      # TLS_DB_ENDPOINTS: ${TLS_DB_ENDPOINTS}
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DEMO_INSTANCE_TESTOPS_DB_HOST}:${DEMO_INSTANCE_TESTOPS_DB_PORT}/${DEMO_INSTANCE_TESTOPS_DB_NAME}?assumeMinServerVersion=11&ApplicationName=${DEMO_INSTANCE_TESTOPS_SERVICE_NAME}
      SPRING_DATASOURCE_USERNAME: ${DEMO_INSTANCE_TESTOPS_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DEMO_INSTANCE_TESTOPS_DB_PASS}
      SPRING_DATASOURCE_HIKARI_MAXIMUMPOOLSIZE: ${DEMO_INSTANCE_TESTOPS_DB_MAXIMUMPOOLSIZE}
      SPRING_DATASOURCE_HIKARI_CONNECTIONTIMEOUT: ${DEMO_INSTANCE_TESTOPS_DB_CONNECTIONTIMEOUT}

      SPRING_RABBITMQ_HOST: ${DEMO_INSTANCE_RABBIT_HOST}
      SPRING_RABBITMQ_PORT: ${DEMO_INSTANCE_RABBIT_PORT}
      SPRING_RABBITMQ_USERNAME: ${DEMO_INSTANCE_RABBIT_USER}
      SPRING_RABBITMQ_PASSWORD: ${DEMO_INSTANCE_RABBIT_PASS}
      SPRING_RABBITMQ_LISTENER_SIMPLE_MAXCONCURRENCY: ${DEMO_INSTANCE_RABBIT_MAXCONCURRENCY}
      ALLURE_UPLOAD_PARSE_CONSUMERSPERQUEUE: ${DEMO_INSTANCE_RABBIT_PARSE_CONSUMERSPERQUEUE}
      ALLURE_UPLOAD_STORE_CONSUMERSPERQUEUE: ${DEMO_INSTANCE_RABBIT_STORE_CONSUMERSPERQUEUE}

      ALLURE_BLOBSTORAGE_TYPE: S3
      ALLURE_BLOBSTORAGE_S3_PATHSTYLEACCESS: ${DEMO_INSTANCE_S3_PATHSTYLE}
      ALLURE_BLOBSTORAGE_S3_ENDPOINT: ${DEMO_INSTANCE_S3_URL}
      ALLURE_BLOBSTORAGE_S3_BUCKET: ${DEMO_INSTANCE_S3_BUCKET}
      ALLURE_BLOBSTORAGE_S3_REGION: ${DEMO_INSTANCE_S3_REGION}
      ALLURE_BLOBSTORAGE_S3_ACCESSKEY: ${DEMO_INSTANCE_S3_ACCESS_KEY}
      ALLURE_BLOBSTORAGE_S3_SECRETKEY: ${DEMO_INSTANCE_S3_SECRET_KEY}
      ALLURE_BLOBSTORAGE_MAXCONCURRENCY: ${DEMO_INSTANCE_S3_MAXCONCURRENCY}
      ALLURE_SCHEDULER_CLEANER_BLOB_BATCHSIZE: ${DEMO_INSTANCE_SCHEDULER_CLEANER_BLOB_BATCHSIZE}
      ALLURE_TASKEXECUTOR_COREPOOLSIZE: ${DEMO_INSTANCE_TASKEXECUTOR_COREPOOLSIZE}

      ALLURE_REDIS_SESSIONTTL: ${INACTIVE_USER_SESSION_EXPIRATION}

      MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED: 'true'
      MANAGEMENT_HEALTH_DISKSPACE_ENABLED: 'false'
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,prometheus,configprops
      MANAGEMENT_ENDPOINT_HEALTH_CACHE_TIME-TO-LIVE: 15s
      LOGGING_LEVEL_IO_QAMETA_ALLURE: warn
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: warn
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK: warn
      LOGGING_LEVEL_COM_ZAXXER_HIKARI: warn
      SERVER_ERROR_INCLUDE_STACKTRACE: always
      TZ: ${TZ}
      JAVA_TOOL_OPTIONS: >
        -XX:+UseG1GC
        -XX:+UseStringDeduplication
        -XX:MinHeapFreeRatio=15
        -XX:MaxHeapFreeRatio=30
        -Dsun.jnu.encoding=UTF-8
        -Dfile.encoding=UTF-8
    logging:
      driver: "json-file"
      options:
        max-size: "10mb"

  testops-db:
    restart: always
    image: postgres:15
    container_name: testops-db
    networks:
      - testops-net
    volumes:
      - testops-db-volume:/var/lib/postgresql/data
    environment:
      TZ: ${TZ}
      POSTGRES_DB: ${DEMO_INSTANCE_TESTOPS_DB_NAME}
      POSTGRES_USER: ${DEMO_INSTANCE_TESTOPS_DB_USERNAME}
      POSTGRES_PASSWORD: ${DEMO_INSTANCE_TESTOPS_DB_PASS}

  redis:
    restart: always
    image: bitnami/redis:6.2
    container_name: redis
    networks:
      - testops-net
    environment:
      TZ: ${TZ}
      REDIS_PASSWORD: ${DEMO_INSTANCE_REDIS_PASS}
      REDIS_PORT_NUMBER: ${DEMO_INSTANCE_REDIS_PORT}
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30

  rabbitmq:
    restart: always
    image: rabbitmq:3.9-management
    container_name: rabbitmq
    networks:
      - testops-net
    volumes:
      - rabbitmq-volume:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${DEMO_INSTANCE_RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${DEMO_INSTANCE_RABBIT_PASS}

  minio-local:
    restart: always
    image: bitnami/minio:2022
    container_name: minio-local
    networks:
      - testops-net
    volumes:
      - minio-volume:/data
    environment:
      MINIO_ROOT_USER: ${DEMO_INSTANCE_S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${DEMO_INSTANCE_S3_SECRET_KEY}
      MINIO_PROMETHEUS_AUTH_TYPE: 'public'
    ports:
      - "9000:9000"

  minio-local-provisioning:
    restart: "no"
    image: minio/mc
    container_name: minio-provisioning
    depends_on:
      - minio-local
    networks:
      - testops-net
    entrypoint: "/bin/sh -c"
    command: >
      "mc config host add ${DEMO_INSTANCE_S3_PROVIDER} ${DEMO_INSTANCE_S3_URL} ${DEMO_INSTANCE_S3_ACCESS_KEY} ${DEMO_INSTANCE_S3_SECRET_KEY} --api S3v4 &&
      mc mb ${DEMO_INSTANCE_S3_PROVIDER}/${DEMO_INSTANCE_S3_BUCKET} --ignore-existing --region ${DEMO_INSTANCE_S3_REGION} &&
      mc admin info ${DEMO_INSTANCE_S3_PROVIDER}"

networks:
  testops-net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.100.0/24

volumes:
  rabbitmq-volume:
  minio-volume:
  testops-db-volume:
