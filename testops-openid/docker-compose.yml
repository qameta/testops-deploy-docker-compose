version: "3.9"

services:
  testops:
    restart: always
    image: ${IMAGES_REGISTRY}/${IMAGES_REPO}/testops:${RELEASE_TO_DEPLOY}
    container_name: testops
    networks:
      - testops-net
    ports:
      - "${TESTOPS_INSTANCE_PORT}:${TESTOPS_CONTAINER_PORT}"
    healthcheck:
      test: "curl -f http://localhost:${TESTOPS_CONTAINER_PORT}/management/health || exit 1"
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 20s
    environment:
      TLS_ENDPOINTS: ${TLS_ENDPOINTS}
      SPRING_PROFILES_ACTIVE: compose
      SPRING_CLOUD_CONSUL_ENABLED: "false"
      SPRING_OUTPUT_ANSI_ENABLED: never
      ALLURE_JWT_SECRET: ${TESTOPS_JWT_SECRET}
      ALLURE_SECURE: ${TESTOPS_SECURE_COOKIE}
      ALLURE_JWT_ACCESS_TOKEN_VALIDITY_SECONDS: ${TESTOPS_SESSION_DURATION}
      ALLURE_MAIL_ROOT: ${FIRST_ADMIN_EMAIL}
      ALLURE_ENDPOINT: ${TESTOPS_PROTO}://${TESTOPS_INSTANCE_URL}
      ALLURE_CRYPTO_PASSWORD: ${TESTOPS_CRYPTO_PASSWORD}

      # deprecated starting from 5.6.0
      # enable only if you are deploying 5.5.1
      # ALLURE_SECURITY_USER_NAME: admin
      # ALLURE_SECURITY_USER_PASSWORD: admin

      # legacy parameters for users registration, leave as they are defined
      ALLURE_REGISTRATION_AUTOAPPROVE: false
      ALLURE_REGISTRATION_ENABLED: false

      # default role for a new user added as system managed account
      ALLURE_REGISTRATION_DEFAULT_ROLE: ROLE_GUEST

      SPRING_SESSION_STORE_TYPE: REDIS
      SPRING_DATA_REDIS_HOST: ${REDIS_HOST}
      SPRING_DATA_REDIS_PORT: ${REDIS_PORT}
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASS}
      SPRING_DATA_REDIS_DATABASE: ${REDIS_DB}
      
      #TLS_DB_ENDPOINTS: ${TLS_DB_ENDPOINTS}
      SPRING_DATASOURCE_URL: jdbc:postgresql://${TESTOPS_DB_HOST}:${TESTOPS_DB_PORT}/${TESTOPS_DB_NAME}?assumeMinServerVersion=11&ApplicationName=${TESTOPS_SERVICE_NAME}
      SPRING_DATASOURCE_USERNAME: ${TESTOPS_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${TESTOPS_DB_PASS}
      SPRING_DATASOURCE_HIKARI_MAXIMUMPOOLSIZE: ${TESTOPS_DB_MAXIMUMPOOLSIZE}
      SPRING_DATASOURCE_HIKARI_CONNECTIONTIMEOUT: ${TESTOPS_DB_CONNECTIONTIMEOUT}

      SPRING_RABBITMQ_HOST: ${RABBIT_HOST}
      SPRING_RABBITMQ_PORT: ${RABBIT_PORT}
      SPRING_RABBITMQ_USERNAME: ${RABBIT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBIT_PASS}
      SPRING_RABBITMQ_LISTENER_SIMPLE_MAXCONCURRENCY: ${TESTOPS_RABBIT_MAXCONCURRENCY}
      ALLURE_UPLOAD_PARSE_CONSUMERSPERQUEUE: ${TESTOPS_RABBIT_PARSE_CONSUMERSPERQUEUE}
      ALLURE_UPLOAD_STORE_CONSUMERSPERQUEUE: ${TESTOPS_RABBIT_STORE_CONSUMERSPERQUEUE}

      ALLURE_BLOBSTORAGE_TYPE: S3
      ALLURE_BLOBSTORAGE_S3_PATHSTYLEACCESS: ${TESTOPS_S3_PATHSTYLE}
      ALLURE_BLOBSTORAGE_S3_ENDPOINT: ${TESTOPS_S3_URL}
      ALLURE_BLOBSTORAGE_S3_BUCKET: ${TESTOPS_S3_BUCKET}
      ALLURE_BLOBSTORAGE_S3_REGION: ${TESTOPS_S3_REGION}
      ALLURE_BLOBSTORAGE_S3_ACCESSKEY: ${TESTOPS_S3_ACCESS_KEY}
      ALLURE_BLOBSTORAGE_S3_SECRETKEY: ${TESTOPS_S3_SECRET_KEY}
      ALLURE_BLOBSTORAGE_MAXCONCURRENCY: ${TESTOPS_S3_MAXCONCURRENCY}
      
      ALLURE_SCHEDULER_CLEANER_BLOB_BATCHSIZE: ${TESTOPS_SCHEDULER_CLEANER_BLOB_BATCHSIZE}
      ALLURE_TASKEXECUTOR_COREPOOLSIZE: ${TESTOPS_TASKEXECUTOR_COREPOOLSIZE}
      ALLURE_REDIS_SESSIONTTL: ${INACTIVE_USER_SESSION_EXPIRATION}      

      MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED: 'true'
      MANAGEMENT_HEALTH_DISKSPACE_ENABLED: 'false'
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,prometheus,configprops
      MANAGEMENT_ENDPOINT_HEALTH_CACHE_TIME-TO-LIVE: 15s
      LOGGING_LEVEL_IO_QAMETA_ALLURE: warn
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: warn
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK: warn
      LOGGING_LEVEL_COM_ZAXXER_HIKARI: warn
      SERVER_ERROR_INCLUDE_STACKTRACE: always
      
      # SPRING_MAIL_ are mandatory for any authentication type
      SPRING_MAIL_HOST: ${SMTP_HOST}
      SPRING_MAIL_PORT: ${SMTP_PORT}
      SPRING_MAIL_USERNAME: ${SMTP_USERNAME}
      SPRING_MAIL_PASSWORD: ${SMTP_PASSWORD}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: ${SMTP_AUTH}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: ${SMTP_STARTTLS_ENABLE}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_REQUIRED: ${SMTP_STARTTLS_REQUIRED}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_SSL_ENABLE: ${SMTP_SSL_ENABLE}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_SSL_TRUST: ${SMTP_SSL_TRUST}
      ALLURE_MAIL_FROM: ${SMTP_MAIL_FROM}

      # openid settings
      ALLURE_LOGIN_PRIMARY: openid
      ALLURE_LOGIN_OPENID_DEFAULTROLE: ${TESTOPS_OPENID_DEFAULTROLE}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OPENID_CLIENTNAME: ${TESTOPS_OPENID_CLIENTNAME}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OPENID_CLIENTID: ${TESTOPS_OPENID_CLIENTID}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OPENID_CLIENTSECRET: ${TESTOPS_OPENID_CLIENTSECRET}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OPENID_REDIRECTURI: ${TESTOPS_OPENID_REDIRECTURI}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OPENID_SCOPE: ${TESTOPS_OPENID_SCOPE}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OPENID_AUTHORIZATIONGRANTTYPE: ${TESTOPS_OPENID_AUTHORIZATIONGRANTTYPE}
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OPENID_AUTHORIZATIONURI: ${TESTOPS_OPENID_AUTHORIZATIONURI}
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OPENID_USERNAMEATTRIBUTE: ${TESTOPS_OPENID_USERNAMEATTRIBUTE}
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OPENID_JWKSETURI: ${TESTOPS_OPENID_JWKSETURI}
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OPENID_TOKENURI: ${TESTOPS_OPENID_TOKENURI}

      # these are optional parameters you can enable if it's required by your openid provider
      # SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OPENID_ISSUERURI: ${TESTOPS_OPENID_ISSUERURI}
      # SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OPENID_USERINFOURI: ${TESTOPS_OPENID_USERINFOURI}

      ALLURE_LOGIN_OPENID_FIRSTNAMEATTRIBUTE: ${TESTOPS_OPENID_FIRSTNAMEATTRIBUTE}
      ALLURE_LOGIN_OPENID_LASTAMEATTRIBUTE: ${TESTOPS_OPENID_LASTAMEATTRIBUTE}
      
      # these parameters are for the usage with OpenID IdP groups to assign the global roles to users
      # depending on the membership in OpenID provider groups      
      ALLURE_LOGIN_OPENID_SYNCROLES: ${TESTOPS_OPENID_SYNCROLES}
      ALLURE_LOGIN_OPENID_GROUPROLEATTRIBUTE: ${TESTOPS_OPENID_GROUPROLEATTRIBUTE}
      ALLURE_LOGIN_OPENID_GROUPAUTHORITIES_ROLEUSERGROUPS: ${TESTOPS_OPENID_GROUPAUTHORITIES_ROLEUSERGROUPS}
      ALLURE_LOGIN_OPENID_GROUPAUTHORITIES_ROLEADMINGROUPS: ${TESTOPS_OPENID_GROUPAUTHORITIES_ROLEADMINGROUPS}

      TZ: ${TZ}
      JAVA_TOOL_OPTIONS: >
        -XX:+UseG1GC
        -XX:+UseStringDeduplication
        -XX:MinHeapFreeRatio=15
        -XX:MaxHeapFreeRatio=30
        -Dsun.jnu.encoding=UTF-8
        -Dfile.encoding=UTF-8
    logging:
      driver: "json-file"
      options:
        max-size: "10mb"


  redis:
    restart: always
    image: bitnami/redis:6.2
    container_name: redis
    networks:
      - testops-net
    environment:
      TZ: ${TZ}
      REDIS_PASSWORD: ${REDIS_PASS}
      REDIS_PORT_NUMBER: ${REDIS_PORT}
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30

  rabbitmq:
    restart: always
    image: rabbitmq:3.9-management
    container_name: rabbitmq
    networks:
      - testops-net
    volumes:
      - rabbitmq-volume:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASS}

  autoheal:
    restart: always
    container_name: autoheal
    image: willfarrell/autoheal
    environment:
      AUTOHEAL_CONTAINER_LABEL: all
      AUTOHEAL_INTERVAL: 30
      AUTOHEAL_START_PERIOD: 60
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  testops-net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.100.0/24

volumes:
  rabbitmq-volume:
